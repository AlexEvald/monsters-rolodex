{"version":3,"sources":["components/card-list/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yTAIaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAM,wBAAyBH,EAAMI,QAAQC,GAAG,2BACnE,+BAAKL,EAAMI,QAAQE,KAAnB,OACA,6BAAKN,EAAMI,QAAQG,YCJdC,EAAW,SAACR,GAAD,OAEnB,qBAAKC,UAAU,YAAf,SACCD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACxB,cAAC,EAAD,CAAyBA,QAASA,GAArBA,EAAQC,UCLhBM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OAEjB,uBAAOZ,UAAU,SAASa,KAAK,SAAUF,YAAaA,EAAaG,SAAWF,MCyCvEG,E,kDApCb,aAAc,IAAD,8BAEX,gBASFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAcF,EAAEG,OAAOC,SARtC,EAAKC,MAAM,CACVb,SAAW,GACXU,YAAc,IANJ,E,qDAeb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAWkB,S,oBAG3C,WACE,MAA+BC,KAAKN,MAA7Bb,EAAP,EAAOA,SAASU,EAAhB,EAAgBA,YACVU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAAIA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBACpG,OACC,sBAAK9B,UAAU,MAAf,UACE,mDACA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAce,KAAKf,eAE5D,cAAC,EAAD,CAAUJ,SAAYoB,W,GAhCXI,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.be16124a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\n\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n        <img alt=\"monster\" src ={'https://robohash.org/'+ props.monster.id+'?set=set2&size=120x180'}/>\r\n        <h1>{props.monster.name} </h1>\r\n        <h2>{props.monster.email}</h2>\r\n    </div>\r\n);","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport {Card} from './card/card.component';\r\n\r\nexport const CardList = (props) => (\r\n\r\n     <div className='card-list'>  \r\n     {props.monsters.map(monster =>(\r\n        <Card key = {monster.id} monster={monster} /> \r\n      ) )}\r\n      </div>\r\n\r\n)","import React from 'react';\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({placeholder,handleChange}) =>(\r\n\r\n        <input className='search' type='search'  placeholder={placeholder} onChange ={handleChange}/>\r\n    \r\n)","import React, { Component } from 'react';\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component'\n\n\n\nclass App extends Component {\n\n\n  constructor(){\n\n    super();\n\n    this.state={\n     monsters : [],\n     searchField : \"\"\n    }\n\n  }\n\n  handleChange = (e) =>{\n    this.setState({searchField : e.target.value})\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters : users}))\n  }\n  \n  render(){\n    const {monsters,searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()) );\n    return (\n     <div className='App'>\n       <h1> Monsters Rolodex</h1>\n       <SearchBox placeholder='search Monsters' handleChange={this.handleChange} />\n       {/* <input type='search'  placeholder='search Monsters' onChange ={e => this.setState({searchField : e.target.value})}/> */}\n       <CardList monsters = {filteredMonsters} />\n     </div>\n\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}